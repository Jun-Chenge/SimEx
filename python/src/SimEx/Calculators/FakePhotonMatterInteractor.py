""" Module that holds the FakePhotonMatterInteractor class.

    @author : CFG
    @institution : XFEL
    @creation 20151111

"""
import os
import subprocess


from SimEx.Calculators.AbstractPhotonInteractor import AbstractPhotonInteractor
from TestUtilities.TestUtilities import generateTestFilePath


class FakePhotonMatterInteractor(AbstractPhotonInteractor):
    """
    Class representing a x-ray free electron laser photon propagator.
    """

    def __init__(self,  parameters=None, input_path=None, output_path=None):
        """
        Constructor for the xfel photon propagator.

        @param parameters : Parameters that govern the PMI calculation.
        @type : dict

        @param input_path : Location of data needed by the PMI calculation (Laser source wavefront data).
        @type : string

        @param output_path : Where to store the data generated by the PMI calculation.
        @type : string
        """

        # Initialize base class.
        super(FakePhotonMatterInteractor, self).__init__(parameters,input_path,output_path)

        self.__provided_data = ['/data/snp_<7 digit index>/ff',
                                '/data/snp_<7 digit index>/halfQ',
                                '/data/snp_<7 digit index>/Nph',
                                '/data/snp_<7 digit index>/r',
                                '/data/snp_<7 digit index>/T',
                                '/data/snp_<7 digit index>/Z',
                                '/data/snp_<7 digit index>/xyz',
                                '/data/snp_<7 digit index>/Sq_halfQ',
                                '/data/snp_<7 digit index>/Sq_bound',
                                '/data/snp_<7 digit index>/Sq_free',
                                '/history/parent/detail',
                                '/history/parent/parent',
                                '/info/package_version',
                                '/info/contact',
                                '/info/data_description',
                                '/info/method_description',
                                '/version']

        self.__expected_data = ['/data/arrEhor',
                                '/data/arrEver',
                                '/params/Mesh/nSlices',
                                '/params/Mesh/nx',
                                '/params/Mesh/ny',
                                '/params/Mesh/qxMax',
                                '/params/Mesh/qxMin',
                                '/params/Mesh/qyMax',
                                '/params/Mesh/qyMin',
                                '/params/Mesh/sliceMax',
                                '/params/Mesh/sliceMin',
                                '/params/Mesh/xMax',
                                '/params/xMin',
                                '/params/yMax',
                                '/params/yMin',
                                '/params/zCoord',
                                '/params/beamline/printout',
                                '/params/Rx',
                                '/params/Ry',
                                '/params/dRx',
                                '/params/dRy',
                                '/params/nval',
                                '/params/photonEnergy',
                                '/params/wDomain',
                                '/params/wEFieldUnit',
                                '/params/wFloatType',
                                '/params/wSpace',
                                '/params/xCentre',
                                '/params/yCentre',
                                '/info/package_version',
                                '/info/contact',
                                '/info/data_description',
                                '/info/method_description',
                                '/misc/xFWHM',
                                '/misc/yFWHM',
                                '/version',
                                ]

        if (self.parameters is None) or ('number_of_trajectories' not in self.parameters.keys()):
            self.parameters = {'number_of_trajectories' : 1,
                    }

    def expectedData(self):
        """ Query for the data expected by the Interactor. """
        return self.__expected_data

    def providedData(self):
        """ Query for the data provided by the Interactor. """
        return self.__provided_data

    def backengine(self):
        """ This method drives the backengine code."""
        status = 0
        data_source = generateTestFilePath('pmi_out_0000001.h5')

        try:
            if self.parameters['number_of_trajectories'] == 1:
                data_target = os.abspath( self.output_path )
                command_string = 'cp %s %s' % (data_source, data_target)
                proc = subprocess.Popen(command_string, shell=True)
                proc.wait()
            else:

                # Check if output_path already exists as a file.
                if os.path.isfile(self.output_path):
                    raise IOError("Output path %s already exists but is not a directory. Cowardly refusing to overwrite existing file." % (self.output_path))
                # Check if output_path already exists as a directory. Create if not.
                if not os.path.isdir(self.output_path):
                    os.mkdir(self.output_path)
                for i in range(self.parameters['number_of_trajectories']):
                    data_target = os.path.join( os.path.abspath( self.output_path ), 'pmi_out_%07d.h5' % (i) )
                    command_string = 'cp %s %s' % (data_source, data_target)
                    proc = subprocess.Popen(command_string, shell=True)
                    proc.wait()
        except:
            status = 1

        return status

    @property
    def data(self):
        """ Query for the field data. """
        return self.__data

    def _readH5(self):
        """ """
        """ Private method for reading the hdf5 input and extracting the parameters and data relevant to initialize the object. """
        pass # Nothing to be done since IO happens in backengine.

    def saveH5(self):
        """ """
        """
        Private method to save the object to a file.

        @param output_path : The file where to save the object's data.
        @type : string
        @default : None
        """
        pass # No action required since output is written in backengine.
