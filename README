SIMEX PLATFORM
==================

Software platform for simulation of advanced photon experiments.

Contents
==============
1.) Purpose of the software
2.) Installation
3.) Getting started


1.) Purpose of simex_platform
The present code is meant to facilitate setup, execution, and analysis of
simulations of experiments at advanced laser light sources.
As an example, consider a molecule radiated by highly brilliant,
ultrashort x-ray pulses such as delivered by an X-Ray Free Electron Laser
(X-FEL). The simulation platform allows to combine tools and codes for the
simulation of each step of the experiment: Generation of radiation in the
photon source, propagation through optics and waveguides to the interaction
point, photon-matter interaction, scattering of the radiation into the far
field and detection of the latter. The platform provides slots and
interfaces for the various simulation steps.

2.) Installation
2.1.) Preliminaries
First obtain the source code either via cloning the repository or via
downloading and extracting the zip file. Change into the top level directory
simex_platform/. The python/ directory contains code for the simulation
framework itself, but it does not contain any actual simulation tools.
A selection of simulation tools tailored for simulation of coherent
diffractive single particel imaging can be built using the Makefile in build/.

2.2) Software dependencies
The build process will fetch and install a number of third party libraries,
such as hdf5, mpich, and boost. Resolving all dependencies for all libraries
certainly goes beyond the scope of this project at the present time and has to
be taken care of by the user. The following lists the minimum required
software needed to build the external simulation tools:
    * wget
    * python2.7
    * python-numpy
    * python-scipy
    * python-h5py
    * python-setuptools
    * python-matplotlib
    * build-essential
    * bz2 libraries (libbz2-dev)
    * GSL (libgsl0-dev)
    * FFTW3 (libfftw3-dev) or MKL
    * lapack
    * cmake
    * C/C++ and Fortran compilers, e.g. gcc

A note on MKL: Make sure that the Intel(R) MKL(R) environment variables are set. This is typically done by running one of the scripts in $INTEL_HOME/bin/, where $INTEL_HOME is the root directory of the Intel(R) MKL(R) installation, e.g. /opt/intel/2015 for a recent version of MKL(R).

2.3) Build external tools
Change into the build/ directory and type
$> make

This will sequentially build and install all external simulation tools.
The build process has been tested on ubuntu 15.04 (64bit).
Some issues were encountered on RHEL6. In particular RHEL6 ships with python2.6 installed but singFEL requires python2.7. Some adjustments in the CMakeLists.txt in the singFEL root directory might be required, see respective comments.

Experiences on other platforms either via
email or on github are highly appreciated!


3.)
Getting started

3.1) Testing the installation.
The project comes with a unittest suite that should be run immediately
after installation. Besides many small tests, the suite also contains a
minimal workflow using the external simulation tools. Cd to python/unittest and type
$> python Test.py -v 2>&1 | tee Test.log
This will run the entire test suite and pipe the output to the file Test.log. A final test report is appended.

3.2) Minimal workflow.
The test module python/unittest/SimExTest/PhotonExperimentSimulation/PhotonExperimentSimulation.py contains the test "testMininalWorkflow". It illustrates how to use the platform to  execute photon experiment simulations.

