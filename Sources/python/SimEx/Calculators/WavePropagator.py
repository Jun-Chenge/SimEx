##########################################################################
#                                                                        #
# Copyright (C) 2015, 2016 Carsten Fortmann-Grote                        #
# Contact: Carsten Fortmann-Grote <carsten.grote@xfel.eu>                #
#                                                                        #
# This file is part of simex_platform.                                   #
# simex_platform is free software: you can redistribute it and/or modify #
# it under the terms of the GNU General Public License as published by   #
# the Free Software Foundation, either version 3 of the License, or      #
# (at your option) any later version.                                    #
#                                                                        #
# simex_platform is distributed in the hope that it will be useful,      #
# but WITHOUT ANY WARRANTY; without even the implied warranty of         #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          #
# GNU General Public License for more details.                           #
#                                                                        #
# You should have received a copy of the GNU General Public License      #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.  #
#                                                                        #
##########################################################################

""" Module that holds the WavePropagator class.

    :author: CFG
    :institution: XFEL
    :creation: 20160321

"""
from wpg import Beamline, Wavefront
from prop.propagateSE import add_history
from wpg.srwlib import srwl
from wpg.wpg_uti_wf import calculate_fwhm, get_intensity_on_axis
import h5py
import os

from SimEx.Calculators.AbstractPhotonPropagator import AbstractPhotonPropagator
from SimEx.Parameters.WavePropagatorParameters import WavePropagatorParameters
from SimEx.Utilities.EntityChecks import checkAndSetInstance
from SimEx.Utilities import wpg_to_opmd


class WavePropagator(AbstractPhotonPropagator):
    """
    Class representing a photon propagator that uses wave optics.
    """

    def __init__(self,  parameters=None, input_path=None, output_path=None):
        """

        :param parameters: Parameters steering the propagation of photons.
        :type parameters: WavePropagatorParameters

        :param input_path: Location of input data for the photon propagation.
        :type input_path: str

        :param output_path: Location of output data for the photon propagation.
        :type output_path: str
        """

        # DCheck (and set) parameters.
        parameters = checkAndSetInstance(WavePropagatorParameters, parameters, WavePropagatorParameters() )

        # Initialize base class.
        super(WavePropagator, self).__init__(parameters,input_path,output_path)


    def backengine(self):
        """ This method drives the backengine code, in this case the WPG interface to SRW.

        :return: 0 if WPG run was successful, 1 if not.

        """
        # Take a reference to data member. All changes will appear in self.__wavefront (reference!).
        wf = self.__wavefront
        bl0 = self.parameters.beamline

        # Switch to frequency domain.
        srwl.SetRepresElecField(wf._srwl_wf, 'f')

        # Calculate spectrum and store on wavefront object.
        sz0 = get_intensity_on_axis(wf);
        wf.custom_fields['/misc/spectrum0'] = sz0

        # Now propagate.
        bl0.propagate(wf)

        # Calculate spectrum again.
        sz1 = get_intensity_on_axis(wf);
        wf.custom_fields['/misc/spectrum1'] = sz1

        # Switch back to time domain.
        srwl.SetRepresElecField(wf._srwl_wf, 't')

        #Resizing.
        srwl.ResizeElecField(wf._srwl_wf, 'c', [0, 0.25, 1, 0.25,  1]);

        # Get fwhm.
        fwhm = calculate_fwhm(wf)

        # Store on wavefront object.
        wf.custom_fields['/misc/xFWHM'] = fwhm['fwhm_x']
        wf.custom_fields['/misc/yFWHM'] = fwhm['fwhm_y']
        wf.custom_fields['/params/beamline/printout'] = str(bl0)

        wf.custom_fields['/info/contact'] = [
            'Name: Liubov Samoylova', 'Email: liubov.samoylova@xfel.eu',
            'Name: Alexey Buzmakov', 'Email: buzmakov@gmail.com']
        wf.custom_fields['/info/data_description'] = 'This dataset contains infromation about wavefront propagated through beamline (WPG and SRW frameworks).'
        wf.custom_fields['/info/method_description'] = """WPG, WaveProperGator (http://github.com/samoylv/WPG)is an interactive simulation framework for coherent X-ray wavefront propagation.\nSRW, Synchrotron Radiation Workshop (http://github.com/ochubar/SRW),  is a physical optics computer code  for simulation of the radiation wavefront propagation through optical systems of beamlines as well as  detailed characteristics of Synchrotron Radiation (SR) generated by relativistic electrons in magnetic fields of arbitrary configuration."""
        wf.custom_fields['/info/package_version'] = '2016.1'

        return 0


    @property
    def data(self):
        """ Query for the field data.

        :return: The WPG wavefront data.

        """
        return self.__wavefront

    def _readH5(self):
        """ """
        """ Private method for reading the hdf5 input and extracting the parameters and data relevant to initialize the object. """
        # Check input.
        try:
            self.__h5 = h5py.File( self.input_path, 'r' )
        except:
            raise IOError( 'The input_path argument (%s) is not a path to a valid hdf5 file.' % (self.input_path) )

        # Construct wpg wavefront based on input data.
        self.__wavefront = Wavefront()
        self.__wavefront.load_hdf5(self.input_path)

    def saveH5(self):
        """
        Method to save the object to a file.

        :param output_path:   The file where to save the wavefront data.
        :type output_path:    str, default 'prop_out.h5'

        """

        # Write data to hdf file using wpg interface function.
        self.__wavefront.store_hdf5(self.output_path)
        add_history(self.output_path, self.input_path)

        # Write openPMD file if requested.
        if self.parameters.use_opmd:
            wpg_to_opmd.convertToOPMD( self.output_path )

